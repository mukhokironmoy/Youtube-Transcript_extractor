0:00:10 : Hello, everyone, and welcome to this 
course on modern application development.  
0:00:16 : Today, we will be talking about views 
in the context of web applications. 
 
0:00:25 : So, the outline of the talk is roughly like 
this, I had already mentioned the model view  
0:00:30 : controller paradigm, the MVC paradigm, we will 
briefly look at that, once again review that,  
0:00:35 : then we will go a bit deeper into the V part 
of MVC, which is the views and user interfaces,  
0:00:42 : I will then describe some tools 
and techniques that can be used for  
0:00:46 : implementing and understanding views. 
And one particular aspect of this that I feel  
0:00:52 : needs to be emphasised is accessibility. And 
I will make a little bit more of a detour on  
0:00:58 : that and go into a little bit more in depth 
on those on that part of the content.
 
0:01:13 : So, like I said, what we are 
doing over here is looking at  
0:01:16 : the view part of the model view controller. 
Let us quickly recap, what this is. The overall  
0:01:26 : structure of a web app or in fact, any user 
interface based graphical user interface-based  
0:01:32 : application can be thought of as having 3 
components. The first is the model by which  
0:01:41 : we basically mean, the data itself, which would 
typically be stored somewhere on a server,  
0:01:48 : and has some kind of metadata or 
information associated with it. 
 
0:01:53 : If it is emails, it might have, for example, 
headers, such as the source, the destination,  
0:01:58 : the time of sending the type of content, and maybe 
even some more details on how it was routed from  
0:02:04 : the source to the destination. So, that is part of 
the model. In other words, all of that corresponds  
0:02:11 : to data that needs to be stored on the server in 
order to understand what exactly it is that we are  
0:02:15 : trying to manipulate over here. 
The next part, the view,  
0:02:20 : is where we would do for example, something like 
displaying a list of emails, reading individually,  
0:02:25 : emails, maybe composing a new email, each of those 
would correspond to a different view, that is  
0:02:31 : where the user interacts with the application. 
And the third part is the controller, which  
0:02:40 : is the part that actually takes messages 
between the user interface that is the view  
0:02:45 : and the data, which is the model. 
So, the controller is primarily responsible  
0:02:49 : for taking information back and forth between the 
view and the model. For example, let us say that  
0:02:55 : we wanted to sort the emails, a message would go 
from the view, where we will probably click on  
0:03:00 : a button. But the message that goes to the server 
is that we want a different way of looking at the  
0:03:08 : data, and perhaps do some filtering on the on the 
messages that are being sent back to the view. 
 
0:03:16 : Alternatively, the controller could actually 
manipulate the data. I might, for example, compose  
0:03:20 : a new email, delete an old email, archive it set 
a certain flag, let us say make it important,  
0:03:27 : or label it based on the person who sent it or 
according to the project under which it belongs.  
0:03:34 : All of those are in some ways, manipulating the 
underlying model that is being stored in the data  
0:03:40 : server. So, as I said earlier, in this lecture, 
we are going to concentrate on the view. 
 
0:03:52 : So, the core idea of model view controller has its 
origins in the late 70s, early 80s. In particular,  
0:03:59 : there was a language called Smalltalk that came 
out of Xerox, the Palo Alto Research Corporation,  
0:04:04 : Research Centre. So, Xerox PARC has  
0:04:08 : a very important place in the history of 
modern computing, a lot of very interesting  
0:04:14 : developments, both in terms of hardware 
and software came out of that lab. 
 
0:04:18 : Nowadays we know Xerox, mainly as you know, it is 
become synonymous with taking photocopies we take  
0:04:25 : we say, take a Xerox whereas what we actually mean 
is take a photocopy of a piece of paper. So, Xerox  
0:04:33 : PARC was a place where many developments and 
computing happened one of which was Smalltalk 80.  
0:04:39 : And Smalltalk essentially was in some ways, a very 
interesting kind of object-oriented language. 
 
0:04:47 : And one of the things that they did as part of 
the development of Smalltalk was the separation  
0:04:51 : of responsibilities, the abstraction, which 
allowed this whole object-oriented nature,  
0:04:59 : you had certain objects which could maybe have 
a window as an object, you could also have an  
0:05:04 : object which represented some kind of data, the 
model that you are trying to manipulate. And each  
0:05:09 : of those was then essentially manipulated by 
sending messages from one part to another. 
 
0:05:14 : So, this whole idea of the model view controller 
has its origins over here, but since then has  
0:05:20 : come to be implemented extensively in various 
forms of general user interfaces. And, in fact,  
0:05:29 : one way of looking at it is that the MVC is not 
so much a design pattern by itself or a design  
0:05:35 : paradigm by itself, it is more a combination 
of a few different software patterns. 
 
0:05:43 : So, design patterns, as I had briefly 
mentioned once earlier, are essentially  
0:05:47 : common software patterns, they represent 
in some sense experience. Several software  
0:05:53 : designers, over the years have found that 
certain ways of implementing logic are more  
0:05:58 : efficient than others, or are very effective 
at getting certain properties implemented.  
0:06:08 : And those learnings over the years are abstracted 
out into various kinds of design patterns. 
 
0:06:15 : So, according to this, essentially, the model 
represents the application object, whatever it  
0:06:19 : is that you are trying to manipulate. The view 
is the screen representation. And each of those  
0:06:24 : themselves the model as well as the view can 
be thought of as an object, in some ways.  
0:06:29 : The view is an object because it has certain 
properties of its own, where is it being  
0:06:34 : displayed? What size is the screen on which it 
is being displayed? What kind of buttons are  
0:06:38 : present on it? How are they located? The layout? 
All of those are properties of the view. 
 
0:06:43 : Similarly, the model has its own properties. 
Who sent the email to whom was it sent? When  
0:06:48 : was it sent through which router was it passed? 
All of those are properties of the email. So,  
0:06:55 : this separation of the design patterns allowed the 
construction of this model view controller. And  
0:07:02 : ultimately, the controller part is the messages 
that go between these two, the view and the model.  
0:07:08 : It can be thought of as essentially, how does 
the user interface react to user input. 
 
0:07:16 : And this is something that you need to keep in 
mind, even when you are developing a web app,  
0:07:20 : there are two parts where the user 
is interacting with your application.  
0:07:24 : One is they are consuming what you show them, they 
are actually seeing what you put on the screen.  
0:07:28 : The other is they are actually giving you inputs, 
they are pressing buttons, they are clicking on  
0:07:33 : links, or they might be entering text into 
text boxes, all of those are the user input,  
0:07:40 : which ultimately determines what comes back 
and is presented for user interaction. 
 
0:07:50 : So, through this series of lectures, I am 
going to be following one running example,  
0:07:57 : which allows us to sort of bring out 
most of these in more concrete forms.  
0:08:02 : And the example that I am going 
to use is a student grade book.  
0:08:06 : And what I mean by that is, you have a 
list of students, and a list of courses,  
0:08:13 : so there are some, I am going to basically 
generate names and data at random or here. 
 
0:08:18 : And it does not really correspond to any real 
person or real set of courses. Literally, what I  
0:08:24 : do is go into a spreadsheet, use the random number 
generator and create a bunch of names, courses,  
0:08:29 : and marks. But this is representative of an actual 
application, because we might have something like  
0:08:37 : this, where you have a list of students a 
list of courses, and there are some other  
0:08:42 : entity out there that allows you to represent 
the relationship between the two. All of this  
0:08:48 : is part of how the model is implemented. And 
we will get to that in a future lecture. 
 
0:08:57 : Part of what we are going to do in terms of 
storing the model at least right now the way to  
0:09:01 : look at it is, just a spreadsheet. As you can see, 
this is what it would look like I have something  
0:09:06 : created in Google Sheets. It has a list of names 
out here. And each of these names has some kind  
0:09:12 : of an ID number associated with them. 
Now, are the ID numbers necessary,  
0:09:17 : are the names necessary? What part of this is 
absolutely necessary for the system to work?  
0:09:22 : That is part of the design of the system. It 
is possible to work just with names, you do not  
0:09:27 : really need ID numbers. Of course, the problem is 
you might have two people with the same name. 
 
0:09:31 : So, in any school or college, what you would 
normally find is that people are given distinct  
0:09:37 : roll numbers or ID numbers to identify them. So, 
all that this application is going to use is that  
0:09:44 : you have a name and an ID number associated with 
the person. And the third part, the student course  
0:09:50 : marks, similarly there would be something for 
courses they would have names and the courses  
0:09:53 : would also have some kind of an ID number 
that makes it easy to identify the course.
 
0:09:59 : And you would have some kind of a link, 
there is an ID number for the student and  
0:10:03 : then ID number for the course. And something 
which indicates the marks in that course. So,  
0:10:09 : by that I can basically say that this particular 
student corresponding to ID numbers 003. In this  
0:10:14 : course, AM1100 got 31 marks. So, in that way, of 
course, the data that I have shown over here, it  
0:10:22 : is possible that there might be duplicates, like 
I said, I just generated some random values. 
 
0:10:26 : But in general, you would need to 
also do some validation on the data,  
0:10:29 : make sure that you do not have, for example, 
different marks for the same student for the same  
0:10:34 : course, you cannot have more than one entry. All 
that comes later when we look at the model. 
 
0:10:39 : For now, what we are interested in is the view. 
And possible views of this could be something  
0:10:47 : like this, let us say that I want all the marks 
for one individual student, I might, for example,  
0:10:52 : have another spreadsheet or another location, 
where I can enter the ID number of the student.  
0:11:01 : Ideally, the system should then pull out the 
name from the student database and show it to me.  
0:11:06 : And it should also say that these are the 
courses the student is registered for.  
0:11:10 : And these for the marks in those courses. 
Now, in this particular case, I have shown this  
0:11:15 : I have done this by hand, I basically pulled 
out the name I pulled out corresponding to this  
0:11:19 : number. And I just copied and pasted the entries 
corresponding to the courses that that student had  
0:11:25 : taken. Is there a way to automate this, of course, 
even within the constraints of a spreadsheet,  
0:11:32 : it should have been possible for me to 
create something using some lookups and  
0:11:36 : other kinds of techniques, which would allow me 
to create such a table like this. But as far as  
0:11:40 : we are concerned right now, the important 
point is this is an example of a view. 
 
0:11:46 : So, in this case, I have a view where I 
provided as input, a user ID number, and  
0:11:53 : I have as output the name of the person, the 
courses for which they are registered and the  
0:11:57 : marks that they got in each of those courses. In 
this particular case, the view was constructed by  
0:12:02 : hand. And obviously, what we are interested 
in is can this be done automatically? 
 
0:12:09 : Now, there are many other kinds of views you 
could think of as well. So, for example, if I gave  
0:12:14 : a course number as input, I might like to 
see how many students were registered for it?  
0:12:18 : What was the distribution of marks? Who got 
the highest score? Who got the lowest score?  
0:12:24 : And does the distribution sort of follow a bell 
curve? At what point should I set the cut-off for  
0:12:28 : a high grade or a top grade or 
the next possibly grade and so on?  
0:12:33 : I might want to look at histograms, I might 
want to look at plots of the data. 
 
0:12:38 : So, in other words, you can already 
start imagining that the view that  
0:12:42 : a person is looking for, could be a table, 
it could be a plot, it could be plain text,  
0:12:48 : it might even be in some other format, which is 
you know, some kind of structured data, like Java  
0:12:54 : Script Object Notation or JSON. Why JSON because 
that way I could take that data and feed it into  
0:13:01 : something else, some other programme that I write 
in order to represent it in some other way that I  
0:13:06 : find convenient. So, each of these are different 
options as far as views are concerned. 
 
0:13:14 : And finally, as far as controller, 
the last part of it the controllers,  
0:13:18 : we will get to that much later. What we will 
be looking at is, you know, for example, how do  
0:13:22 : you add new students, add new courses, modify 
your course, modify a student's information,  
0:13:27 : enter the marks for a student in our course. 
All of those are examples of controller  
0:13:34 : functionality that need to be implemented for this 
entire grade book application to be useful.
